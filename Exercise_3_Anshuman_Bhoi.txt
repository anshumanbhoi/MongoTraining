1. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'. 

db.restaurants.find({$or:[{name:{$regex:'^Wil'}},{$and:[{cuisine:{$ne:'American '}},{cuisine:{$ne:'Chinese'}}]}]},{_id:0,restaurant_id:1,name:1,borough:1,cuisine:1})

2. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates..


db.restaurants.aggregate(
[
{
	$unwind:'$grades'
},
{
	$match:{$and:[{'grades.grade':'A'},{'grades.score':11},{'grades.date':ISODate("2014-08-11T00:00:00Z")}]}
},
{
	$project:{_id:0,restaurant_id:1,name:1,grades:1}
}
]
)


3. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z". 

db.restaurants.find({$and:[{'grades.1.grade':'A'},{'grades.1.score':9},{'grades.1.date':ISODate("2014-08-11T00:00:00Z")}]},{_id:0,restaurant_id:1,name:1,grades:1})

4. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52.

db.restaurants.find({'address.coord.1':{$gt:42,$lte:52}},{_id:0,restaurant_id:1,name:1,'address.coord':1})


5. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns. 

db.restaurants.find().sort({name:1})

6. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.

db.restaurants.find().sort({name:-1})

7. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order. 

db.restaurants.find().sort({cuisine:1}).sort({borough:-1})

8. Write a MongoDB query to know whether all the addresses contains the street or not.

db.restaurants.find({'address.street':{$exists:false}})

If the above query returns any documents then all addresses dosn't contain street.
 
9. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double. 

db.restaurants.find({'address.coord':{$type:'double'}})

10. Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.

db.restaurants.find({'address.coord':{$type:'double'}})
 
11. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name. 

db.restaurants.find({name:{$regex:'mon'}},{_id:0,name:1,borough:1,'address.coord':1})

12. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name. 

db.restaurants.find({name:{$regex:'^Mad'}},{_id:0,name:1,borough:1,'address.coord':1})